// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package internal

import (
	"context"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"sync"
)

// Ensure, that DBPoolMock does implement DBPool.
// If this is not the case, regenerate this file with moq.
var _ DBPool = &DBPoolMock{}

// DBPoolMock is a mock implementation of DBPool.
//
//	func TestSomethingThatUsesDBPool(t *testing.T) {
//
//		// make and configure a mocked DBPool
//		mockedDBPool := &DBPoolMock{
//			ExecFunc: func(ctx context.Context, sql string, args ...interface{}) (pgconn.CommandTag, error) {
//				panic("mock out the Exec method")
//			},
//			QueryRowFunc: func(ctx context.Context, sql string, args ...interface{}) pgx.Row {
//				panic("mock out the QueryRow method")
//			},
//		}
//
//		// use mockedDBPool in code that requires DBPool
//		// and then make assertions.
//
//	}
type DBPoolMock struct {
	// ExecFunc mocks the Exec method.
	ExecFunc func(ctx context.Context, sql string, args ...interface{}) (pgconn.CommandTag, error)

	// QueryRowFunc mocks the QueryRow method.
	QueryRowFunc func(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// calls tracks calls to the methods.
	calls struct {
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SQL is the sql argument value.
			SQL string
			// Args is the args argument value.
			Args []interface{}
		}
		// QueryRow holds details about calls to the QueryRow method.
		QueryRow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SQL is the sql argument value.
			SQL string
			// Args is the args argument value.
			Args []interface{}
		}
	}
	lockExec     sync.RWMutex
	lockQueryRow sync.RWMutex
}

// Exec calls ExecFunc.
func (mock *DBPoolMock) Exec(ctx context.Context, sql string, args ...interface{}) (pgconn.CommandTag, error) {
	if mock.ExecFunc == nil {
		panic("DBPoolMock.ExecFunc: method is nil but DBPool.Exec was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		SQL  string
		Args []interface{}
	}{
		Ctx:  ctx,
		SQL:  sql,
		Args: args,
	}
	mock.lockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	mock.lockExec.Unlock()
	return mock.ExecFunc(ctx, sql, args...)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//
//	len(mockedDBPool.ExecCalls())
func (mock *DBPoolMock) ExecCalls() []struct {
	Ctx  context.Context
	SQL  string
	Args []interface{}
} {
	var calls []struct {
		Ctx  context.Context
		SQL  string
		Args []interface{}
	}
	mock.lockExec.RLock()
	calls = mock.calls.Exec
	mock.lockExec.RUnlock()
	return calls
}

// QueryRow calls QueryRowFunc.
func (mock *DBPoolMock) QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row {
	if mock.QueryRowFunc == nil {
		panic("DBPoolMock.QueryRowFunc: method is nil but DBPool.QueryRow was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		SQL  string
		Args []interface{}
	}{
		Ctx:  ctx,
		SQL:  sql,
		Args: args,
	}
	mock.lockQueryRow.Lock()
	mock.calls.QueryRow = append(mock.calls.QueryRow, callInfo)
	mock.lockQueryRow.Unlock()
	return mock.QueryRowFunc(ctx, sql, args...)
}

// QueryRowCalls gets all the calls that were made to QueryRow.
// Check the length with:
//
//	len(mockedDBPool.QueryRowCalls())
func (mock *DBPoolMock) QueryRowCalls() []struct {
	Ctx  context.Context
	SQL  string
	Args []interface{}
} {
	var calls []struct {
		Ctx  context.Context
		SQL  string
		Args []interface{}
	}
	mock.lockQueryRow.RLock()
	calls = mock.calls.QueryRow
	mock.lockQueryRow.RUnlock()
	return calls
}
